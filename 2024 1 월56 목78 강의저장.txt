

==================================================
FileName.cpp, 저장시간: 2024-05-02 목요일 오후 4:20:06
==================================================

//-----------------------
//목78
// 5.2 목
// list - 자기가 잘 하는 동작을 멤버함수로 제공한다
//		  sort, remove, unique, merge, (splice)
//		  전역 알고리즘 함수가 있더라도 이 함수들을 list가 제공하는 이유를 생각해보자
//----------------------
#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");
	관찰 = true;

	// 리스트가 잘할 수 있는 동작 - merge
	list <String> con1{"민준", "서준", "하준"};
	list <String> con2{"도윤", "시우", "은우", "지호"};

	//merge(con1.begin(), con1.end(), con2.begin(), con2.end(), ostream_iterator<String>{cout, "\n"});
 }


==================================================
FileName.cpp, 저장시간: 2024-05-02 목요일 오후 4:20:12
==================================================

//-----------------------
//목78
// 5.2 목
// list - 자기가 잘 하는 동작을 멤버함수로 제공한다
//		  sort, remove, unique, merge, (splice)
//		  전역 알고리즘 함수가 있더라도 이 함수들을 list가 제공하는 이유를 생각해보자
//----------------------
#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");
	관찰 = true;

	// 리스트가 잘할 수 있는 동작 - merge
	list <String> con1{"민준", "서준", "하준"};
	list <String> con2{"도윤", "시우", "은우", "지호"};

	//merge(con1.begin(), con1.end(), con2.begin(), con2.end(), ostream_iterator<String>{cout, "\n"});
 }


==================================================
FileName.cpp, 저장시간: 2024-05-02 목요일 오후 4:28:47
==================================================

//-----------------------
//목78
// 5.2 목
// list - 자기가 잘 하는 동작을 멤버함수로 제공한다
//		  sort, remove, unique, merge, (splice)
//		  전역 알고리즘 함수가 있더라도 이 함수들을 list가 제공하는 이유를 생각해보자
//----------------------
#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");
	관찰 = true;

	// 리스트가 잘할 수 있는 동작 - merge
	list <string> con1{"민준", "서준", "하준"};
	list <string> con2{"도윤", "시우", "은우", "지호"};

	merge(con1.begin(), con1.end(), con2.begin(), con2.end(), ostream_iterator<string>{cout, "\n"});
 }


==================================================
FileName.cpp, 저장시간: 2024-05-02 목요일 오후 4:43:39
==================================================

//-----------------------
//목78
// 5.2 목
// list - 자기가 잘 하는 동작을 멤버함수로 제공한다
//		  sort, remove, unique, merge, (splice)
//		  전역 알고리즘 함수가 있더라도 이 함수들을 list가 제공하는 이유를 생각해보자
//----------------------
#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");
	관찰 = true;

	// 리스트가 잘할 수 있는 동작 - merge
	list <String> con1{"민준", "서준", "하준"};
	list <String> con2{"도윤", "시우", "은우", "지호"};

	con1.merge(con2);

	for (const String& s : con1)
		cout << s << " ";

	cout << endl;
	cout << "merge된 컨테이너" << endl;
	for (const String& s : con2)
		cout << s << " ";
 }


==================================================
FileName.cpp, 저장시간: 2024-05-02 목요일 오후 4:44:37
==================================================

//-----------------------
//목78
// 5.2 목
// list - 자기가 잘 하는 동작을 멤버함수로 제공한다
//		  sort, remove, unique, merge, (splice)
//		  전역 알고리즘 함수가 있더라도 이 함수들을 list가 제공하는 이유를 생각해보자
//----------------------
#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");

	// 리스트가 잘할 수 있는 동작 - merge
	list <String> con1{"민준", "서준", "하준"};
	list <String> con2{"도윤", "시우", "은우", "지호"};

	관찰 = true;
	con1.merge(con2);

	for (const String& s : con1)
		cout << s << " ";

	cout << endl;
	cout << "merge된 컨테이너" << endl;
	for (const String& s : con2)
		cout << s << " ";
 }


==================================================
FileName.cpp, 저장시간: 2024-05-02 목요일 오후 4:44:57
==================================================

//-----------------------
//목78
// 5.2 목
// list - 자기가 잘 하는 동작을 멤버함수로 제공한다
//		  sort, remove, unique, merge, (splice)
//		  전역 알고리즘 함수가 있더라도 이 함수들을 list가 제공하는 이유를 생각해보자
//----------------------
#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");

	// 리스트가 잘할 수 있는 동작 - merge
	list <String> con1{"민준", "서준", "하준"};
	list <String> con2{"도윤", "시우", "은우", "지호"};

	관찰 = true;
	con1.merge(con2);
	관찰 = false;

	for (const String& s : con1)
		cout << s << " ";

	cout << endl;
	cout << "merge된 컨테이너" << endl;
	for (const String& s : con2)
		cout << s << " ";
 }


==================================================
FileName.cpp, 저장시간: 2024-05-02 목요일 오후 4:56:01
==================================================

//-----------------------
//목78
// 5.2 목
// list - 자기가 잘 하는 동작을 멤버함수로 제공한다
//		  sort, remove, unique, merge, (splice)
//		  전역 알고리즘 함수가 있더라도 이 함수들을 list가 제공하는 이유를 생각해보자
//----------------------
#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include <fstream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");

	// 문제
	// FileName.cpp에 있는 소문자를 list<char>에 저장하라.
	// 저장한 문자가 [a, z]까지 모든 문자가 있는지 확인하라.

	ifstream in{ "FileName.cpp" };

	if (!in)
		return -1;

	list<char> con;

	char c;
	while (in >> c) {
		if (islower(c))
			con.push_back(c);
	}

	con.sort();
	con.unique();  // 중복된 원소를 삭제한다

	//jy

	if (26 == con.size())  
		cout << "모든 문자 포함" << endl;

	else
		cout << "없는 문자가 있음" << endl;



	for (char& c : con)
		cout << c;
	cout << endl;
 }


==================================================
FileName.cpp, 저장시간: 2024-05-02 목요일 오후 5:11:13
==================================================

//-----------------------
//목78
// 5.2 목
// forward_list - 단일 연결 리스트가 필요하다면 이걸 써라.
//                이것보다 더 좋은 걸 만들 수는 없을 것이다.
// 
// It is intended that forward_list have zero space or time overhead relative to 
// a hand-written C-style singly linked list.
// Features that would conflict with that goal have been omitted.
//----------------------
#include <iostream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 1:54:59
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");

	// 반복자는 객체입니다.
	// 출력 스트림 반복자(반복자 어댑터의 일종: 스트림 반복자)를 사용하여 동작을 이해해 본다.

	
	ostream_iterator<char> p{ cout };
	cout << "출력 스트림 반복자의 크기 - " << sizeof(p) << endl;
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 1:57:59
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");

	// 반복자는 객체입니다.
	// 출력 스트림 반복자(반복자 어댑터의 일종: 스트림 반복자)를 사용하여 동작을 이해해 본다.

	
	ostream_iterator<char> p{ cout };
	cout << "출력 스트림 반복자의 크기 - " << sizeof(p) << endl;

	*p = 'A';

	++p;

	*p = 'B';
	++p;

	*p = 'C';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 1:58:10
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");

	// 반복자는 객체입니다.
	// 출력 스트림 반복자(반복자 어댑터의 일종: 스트림 반복자)를 사용하여 동작을 이해해 본다.

	
	ostream_iterator<char> p{ cout };
	cout << "출력 스트림 반복자의 크기 - " << sizeof(p) << endl;

	*p = 'A';
	++p;

	*p = 'B';
	++p;

	*p = 'C';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:00:45
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");

	// 반복자는 객체입니다.
	// 출력 스트림 반복자(반복자 어댑터의 일종: 스트림 반복자)를 사용하여 동작을 이해해 본다.

	
	ostream_iterator<char> p{ cout };
	cout << "출력 스트림 반복자의 크기 - " << sizeof(p) << endl;

	//*p = 'A';
	//++p;

	(p.operator*()).operator = ('A');
	p.operator++();

	*p = 'B';
	++p;

	*p = 'C';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:03:19
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main() {
	save("FileName.cpp");

	// 반복자는 객체입니다.
	// 출력 스트림 반복자(반복자 어댑터의 일종: 스트림 반복자)를 사용하여 동작을 이해해 본다.

	
	ostream_iterator<char> p{ cout };

	p = 'A';
	p = 'B';
	p = 'C';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:14:32
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iter).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	f(ostream_iterator<char> { cout });
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:15:59
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iter).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	f(3);
	f(ostream_iterator<char> { cout });
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:19:38
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	//f(3);
	f(ostream_iterator<char> { cout });
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:28:22
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	//f(3);
	f(ostream_iterator<char> { cout });
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:28:27
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	//f(3);
	f(ostream_iterator<char> { cout });
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:30:30
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	//f(3);
	f(ostream_iterator<char> { cout });
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:30:35
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	//f(3);
	f(ostream_iterator<char> { cout });
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:31:11
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	//f(3);
	f(ostream_iterator<char> { cout });
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:34:04
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	f(istream_iterator<String>{ cin });
	f(ostream_iterator<char> { cout });
	f(forward_list<int>{}.cbegin());
	f(list<float>{}.rbegin());
	f(deque<int>::const_iterator{});
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:34:09
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	f(istream_iterator<String>{ cin });
	f(ostream_iterator<char> { cout });
	f(forward_list<int>{}.cbegin());
	f(list<float>{}.rbegin());
	f(deque<int>::const_iterator{});
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:34:31
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	
	f(istream_iterator<String>{ cin });
	f(ostream_iterator<char> { cout });
	f(forward_list<int>{}.cbegin());
	f(list<float>{}.rbegin());
	f(deque<int>::const_iterator{});
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:40:42
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 반복자 == int일 때 아래 문장은 실패 = SFINAE
	cout << typeid(반복자::iterator_category).name() << endl;

	// 진짜 contiguous 반복자는 다음 문장이 ok
	cout << typeid(반복자::iterator_concept).name() << endl;

}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	// c++ 17에서 추가된 contiguous 반복자 판별은 다른 방식으로 한다,

	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:43:47
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>
#include <array>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 진짜 contiguous 반복자는 다음 문장이 ok
	cout << typeid(반복자::iterator_concept).name() << endl;

}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	// c++ 17에서 추가된 contiguous 반복자 판별은 다른 방식으로 한다,

	//int a[10]{};
//	f(a);
	f(array<int, 10>::iterator{});
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:44:41
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>
#include <array>
#include <string>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 진짜 contiguous 반복자는 다음 문장이 ok
	cout << typeid(반복자::iterator_concept).name() << endl;

}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	// c++ 17에서 추가된 contiguous 반복자 판별은 다른 방식으로 한다,

	//int a[10]{};
//	f(a);
	f(array<int, 10>::iterator{});
	f(string{}.cbegin());
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:48:24
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>
#include <array>
#include <string>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 진짜 contiguous 반복자는 다음 문장이 ok
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	// c++ 17에서 추가된 contiguous 반복자 판별은 다른 방식으로 한다,

	int a[10]{};
	f(a);
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:50:54
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>
#include <array>
#include <string>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 진짜 contiguous 반복자는 다음 문장이 ok
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	// c++ 17에서 추가된 contiguous 반복자 판별은 다른 방식으로 한다,

	int a[10]{};
	f(a);

	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 2:52:25
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>

#include <forward_list>
#include <list>
#include <deque>
#include <vector>
#include <array>
#include <string>

#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");

	// 문제: 반복자는 6가지 종류
	// 반복자를 인자로 받아 어떤 종류인지 출력하는 함수 f()를 작성하라
	// c++ 17에서 추가된 contiguous 반복자 판별은 다른 방식으로 한다,

	int a[10]{};
	f(a);
	f(vector<int>{}.begin());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:03:17
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };

	// 다음 문장이 실행되도록 하라
	for (char s : s)
		cout << s << ' ';
	cout << endl;
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:04:43
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };

	// 다음 문장이 실행되도록 하라
	for (char s : s)
		cout << s << ' ';
	cout << endl;

	sort(s.begin(), s.end());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:05:01
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };

	// 다음 문장이 실행되도록 하라
	for (char s : s)
		cout << s << ' ';
	cout << endl;

	sort(s.begin(), s.end());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:05:08
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };

	// 다음 문장이 실행되도록 하라
	for (char s : s)
		cout << s << ' ';
	cout << endl;

	sort(s.begin(), s.end());
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:06:45
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	string s{ "1357924680" };
	
	for (auto i = s.begin(); i != s.end(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:07:06
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	string s{ "1357924680" };

	sort(s.begin(), s.end());
	
	for (auto i = s.begin(); i != s.end(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:07:19
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	string s{ "1357924680" };

	sort(s.begin(), s.end());
	
	for (auto i = s.begin(); i != s.end(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:07:51
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	string s{ "1357924680" };

	sort(s.rbegin(), s.rend());
	
	for (auto i = s.begin(); i != s.end(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:08:34
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	string s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:09:24
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:10:10
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:11:35
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:16:21
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-06 월요일 오후 3:18:41
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 3:31:30
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 3:58:23
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 3:58:39
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 3:58:43
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 3:59:47
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	// 모든 반복자의 종류를 판별하는 표준 문장
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << ' ';
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 4:15:09
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;
//
//template <class 반복자>
//void f(반복자 iter) {
//	// 모든 반복자의 종류를 판별하는 표준 문장
//	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;
//
//}

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;
}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	f(s.rbegin());  // 종류와 컨셉을 출력
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 4:16:26
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;
//
//template <class 반복자>
//void f(반복자 iter) {
//	// 모든 반복자의 종류를 판별하는 표준 문장
//	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;
//
//}

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

	// c++20
	cout << typeid(반복자::iterator_concept).name() << endl;
}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	f(s.rbegin());  // 종류와 컨셉을 출력
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 4:23:40
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;
//
//template <class 반복자>
//void f(반복자 iter) {
//	// 모든 반복자의 종류를 판별하는 표준 문장
//	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;
//
//}

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

	// c++20
	cout << typeid(반복자::iterator_concept).name() << endl;
}

int main() {
	save("FileName.cpp");
	
	String s{ "1357924680" };
	
	f(s.begin());  // 종류와 컨셉을 출력
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 4:25:06
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;
//
//template <class 반복자>
//void f(반복자 iter) {
//	// 모든 반복자의 종류를 판별하는 표준 문장
//	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;
//
//}

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

	// c++20
	cout << typeid(반복자::iterator_concept).name() << endl;
}

int main() {
	save("FileName.cpp");

	String s{ "1357924680" };

	for (auto i = s.begin(); i != s.end(); ++i) {
		cout << *i << endl;
	}
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 4:25:21
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;
//
//template <class 반복자>
//void f(반복자 iter) {
//	// 모든 반복자의 종류를 판별하는 표준 문장
//	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;
//
//}

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

	// c++20
	cout << typeid(반복자::iterator_concept).name() << endl;
}

int main() {
	save("FileName.cpp");

	String s{ "1357924680" };

	for (auto i = s.rbegin(); i != s.rend(); ++i) {
		cout << *i << endl;
	}
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 4:25:42
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;
//
//template <class 반복자>
//void f(반복자 iter) {
//	// 모든 반복자의 종류를 판별하는 표준 문장
//	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;
//
//}

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

	// c++20
	cout << typeid(반복자::iterator_concept).name() << endl;
}

int main() {
	save("FileName.cpp");

	String s{ "1357924680" };

	for (auto i = s.rbegin(); i != s.rend(); ++i) {
		cout << *i << ' ';
	}
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 5:01:33
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

	// c++20
	cout << typeid(반복자::iterator_concept).name() << endl;
}

int main() {
	save("FileName.cpp");

	String s{ "1357924680" };

	// [실습] 연산자 오버로딩을 더 잘 이해하고 코딩하자
	// 문제
	// 다음 문장이 문제없이 실행되도록 하라
	
	sort(s.begin(), s.end());

	cout << s << endl; //0123456789
 }


==================================================
FileName.cpp, 저장시간: 2024-05-09 목요일 오후 5:01:40
==================================================

//-----------------------
//목78
// 5.6 화
// 
// Iterator - Iterators are a generalization of pointers.
//			- 포인터를 일반화 한 것이 반복자다.
// 
// 
// 6월 6일 목요일 강의 예정
//----------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include "save.h"
#include "String.h" 
using namespace std;
extern bool 관찰;

template <class 반복자>
void f(반복자 iter) {
	cout << typeid(iterator_traits<반복자>::iterator_category).name() << endl;

	// c++20
	cout << typeid(반복자::iterator_concept).name() << endl;
}

int main() {
	save("FileName.cpp");

	String s{ "1357924680" };

	// [실습] 연산자 오버로딩을 더 잘 이해하고 코딩하자
	// 문제
	// 다음 문장이 문제없이 실행되도록 하라
	
	sort(s.begin(), s.end());

	cout << s << endl; //0123456789
 }
